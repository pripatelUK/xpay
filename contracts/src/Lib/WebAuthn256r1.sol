pragma solidity >=0.8.19 <0.9.0;

import { FCL_Elliptic_ZZ } from "./secp256r1.sol";
import { Base64 } from "@solady/utils/Base64.sol";

/// @title WebAuthn256r1
/// @custom:experimental This is an experimental contract.
contract WebAuthn256r1 {
    error InvalidAuthenticatorData();
    error InvalidClientData();
    error InvalidChallenge();

    bytes public sig =
        hex"030000000000000000000000000000000000000000000000000000000000000045000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000276de7996aad706bdff13af9458d927c8101ee7aa067870211c37a3a92da214fb717fb7806e6ee6f39a3bd4bc1296fc49a2ec4a24a73ef159485abbdfab8af2d58000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000a449960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97634500000000adce000235bcc60a648b0b25f1f055030020233214ae5885adf752734b0712d27a93f40a83ae81b3d04d0a4524f4e46fdea0a50102032620012158209dca86cce5904e0094b6e86a8caa7273d0f32d49c57471ccf91baa4d7e8432cd2258207e2e3140629cebf02b40005347ed672242bdda4366e891d3acfe1f00d9bc93500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000897b2274797065223a22776562617574686e2e637265617465222c226368616c6c656e6765223a2238517170504951507a503036612d6d7763576956472d5730565267735a797a32344b6f4a58787579644430222c226f726967696e223a22687474703a2f2f6c6f63616c686f73743a34333337222c2263726f73734f726967696e223a66616c73657d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020f10aa93c840fccfd3a6be9b07168951be5b455182c672cf6e0aa095f1bb2743d00000000000000000000000000000000000000000000000000000000000001c0020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001009dca86cce5904e0094b6e86a8caa7273d0f32d49c57471ccf91baa4d7e8432cd7e2e3140629cebf02b40005347ed672242bdda4366e891d3acfe1f00d9bc9350000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000036b766e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020233214ae5885adf752734b0712d27a93f40a83ae81b3d04d0a4524f4e46fdea000000000000000000000000000000000000000000000000000000000000000415d02932d0bbc02fbac9a1445e53b5b686fd048f9c1f697d874e40cd3693379bf0dd0db93dd107686abac7021b0a234589cc8606a50439d2174e762916164c35d1c00000000000000000000000000000000000000000000000000000000000000";

    function generateMessage(
        bytes1 authenticatorDataFlagMask,
        bytes calldata authenticatorData,
        bytes calldata clientData,
        bytes calldata clientChallenge,
        uint256 clientChallengeOffset
    )
        internal
        pure
        returns (bytes32 message)
    {
        unchecked {
            if ((authenticatorData[32] & authenticatorDataFlagMask) == 0) revert InvalidAuthenticatorData();
            if (clientChallenge.length == 0) revert InvalidChallenge();
            bytes memory challengeEncoded = bytes(Base64.encode(clientChallenge, true, true));
            bytes32 challengeHashed =
                keccak256(clientData[clientChallengeOffset:(clientChallengeOffset + challengeEncoded.length)]);
            if (keccak256(challengeEncoded) != challengeHashed) revert InvalidClientData();
            message = sha256(abi.encodePacked(authenticatorData, sha256(clientData)));
        }
    }

    function verify(
        bytes1 authenticatorDataFlagMask,
        bytes calldata authenticatorData,
        bytes calldata clientData,
        bytes calldata clientChallenge,
        uint256 clientChallengeOffset,
        uint256[2] calldata rs,
        uint256[2] calldata Q
    )
        external
        returns (bool)
    {
        unchecked {
            bytes32 message = generateMessage(
                authenticatorDataFlagMask, authenticatorData, clientData, clientChallenge, clientChallengeOffset
            );
            return FCL_Elliptic_ZZ.ecdsa_verify(message, rs, Q);
        }
    }
}
